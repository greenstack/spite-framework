<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Spite</name>
    </assembly>
    <members>
        <member name="T:Spite.Arena">
            <summary>
            Manages a group of sides in a battle.
            </summary>
        </member>
        <member name="F:Spite.Arena.Sides">
            <summary>
            All the teams/sides that are fighting in this arena.
            </summary>
        </member>
        <member name="P:Spite.Arena.SideCount">
            <summary>
            The number of sides managed by this arena.
            </summary>
        </member>
        <member name="P:Spite.Arena.ArenaName">
            <summary>
            The name of this arena.
            </summary>
        </member>
        <member name="M:Spite.Arena.#ctor(System.UInt32)">
            <summary>
            Creates an arena with the specified number of sides fighting in it.
            </summary>
            <param name="numberOfSides">The number of sides fighting in the arena.</param>
        </member>
        <member name="M:Spite.Arena.#ctor(System.String,System.UInt32)">
            <summary>
            Creates a named arena with the specified number of sides fighting in it.
            </summary>
            <param name="name">The name of the arena.</param>
            <param name="numberOfSides">The number of sides fighting in the arena.</param>
        </member>
        <member name="M:Spite.Arena.GetTeam(System.UInt32)">
            <summary>
            Gets the team with the given index.
            </summary>
            <param name="index">The index of the team.</param>
            <returns>The team at the specified index</returns>
        </member>
        <member name="T:Spite.ArenaBuilder">
            <summary>
            Provides methods useful for building and populating an arena.
            </summary>
        </member>
        <member name="M:Spite.ArenaBuilder.#ctor">
            <summary>
            Creates an instance of an Arena Builder.
            </summary>
        </member>
        <member name="M:Spite.ArenaBuilder.InitArena(System.UInt32)">
            <summary>
            Sets the number of sides fighting in the arena. Must be the first
            method called.
            </summary>
            <param name="sideCount">The number of sides fighting in this arena.</param>
            <returns>The ArenaBuilder for chaining.</returns>
            <see cref="M:Spite.Arena.#ctor(System.UInt32)"/>
            <seealso cref="M:Spite.ArenaBuilder.InitArena(System.String,System.UInt32)"/>
        </member>
        <member name="M:Spite.ArenaBuilder.InitArena(System.String,System.UInt32)">
            <summary>
            Sets the name of and number of sides fighting in the arena. Must be
            the first method called.
            </summary>
            <param name="arenaName">The name of the arena.</param>
            <param name="sideCount">The number of sides fighting in this arena.</param>
            <returns>The ArenaBuilder for chaining.</returns>
            <see cref="M:Spite.Arena.#ctor(System.String,System.UInt32)"/>
            <seealso cref="M:Spite.ArenaBuilder.InitArena(System.UInt32)"/>
        </member>
        <member name="M:Spite.ArenaBuilder.SetTurnScheme(Spite.TurnScheme)">
            <summary>
            Sets the type of turn scheme that this arena will have.
            </summary>
            <param name="scheme">The scheme for determining the granularity and order of turns.</param>
            <returns>The ArenaBuilder for chaining.</returns>
        </member>
        <member name="M:Spite.ArenaBuilder.AddTeam(Spite.ITeam)">
            <summary>
            Adds a team to this arena.
            </summary>
            <param name="team">The team to add to the arena.</param>
            <returns>The team to add to the arena.</returns>
        </member>
        <member name="M:Spite.ArenaBuilder.Finish">
            <summary>
            Finishes building the Arena and returns the built arena.
            </summary>
            <returns>The built arena.</returns>
        </member>
        <member name="T:Spite.BasicTeam">
            <summary>
            Represents a team.
            </summary>
        </member>
        <member name="P:Spite.BasicTeam.AreAllAlive">
            <inheritdoc/>
        </member>
        <member name="P:Spite.BasicTeam.AliveEntityCount">
            <inheritdoc/>
        </member>
        <member name="P:Spite.BasicTeam.ManagedEntityCount">
            <inheritdoc/>
        </member>
        <member name="P:Spite.BasicTeam.CurrentStanding">
            <inheritdoc/>
        </member>
        <member name="M:Spite.BasicTeam.AddEntity(Spite.IEntity)">
            <inheritdoc/>
        </member>
        <member name="M:Spite.BasicTeam.GetEntityByIndex(System.Int32)">
            <summary>
            Retrieves the entity at the specified index.
            </summary>
            <param name="index">The index of the entity.</param>
            <returns>The entity at the given index.</returns>
        </member>
        <member name="M:Spite.BasicTeam.InitializeEntityCount(System.UInt32)">
            <summary>
            Sets the number of entities available to this team.
            </summary>
            <param name="entityCount">The number of entities that can be on the team, or the default starting number.</param>
        </member>
        <member name="M:Spite.BasicTeam.DetermineStanding(Spite.Arena)">
            <inheritdoc/>
        </member>
        <member name="T:Spite.Events.EntityTapStateChangeEventArgs">
            <summary>
            Contains information about the state change of the entity's tapped state.
            </summary>
        </member>
        <member name="P:Spite.Events.EntityTapStateChangeEventArgs.BecameTapped">
            <summary>
            If the entity became tapped during this event.
            </summary>
        </member>
        <member name="M:Spite.Events.EntityTapStateChangeEventArgs.#ctor(System.Boolean)">
            <summary>
            Creates a default EntityTapStateChangeEventArgs object.
            </summary>
            <param name="becameTapped">If the entity</param>
        </member>
        <member name="T:Spite.IEntity">
            <summary>
            Represents an entity that the SpiteFramework can interact with.
            </summary>
        </member>
        <member name="P:Spite.IEntity.Team">
            <summary>
            The team this entity belongs to.
            </summary>
        </member>
        <member name="P:Spite.IEntity.IsAlive">
            <summary>
            If this entity is still alive.
            </summary>
        </member>
        <member name="T:Spite.ITappable">
            <summary>
            Used to make an object tappable or untappable.
            </summary>
        </member>
        <member name="P:Spite.ITappable.IsTapped">
            <summary>
            Whether or not this object is tapped.
            </summary>
        </member>
        <member name="P:Spite.ITappable.OnTapOrUntap">
            <summary>
            An event that is fired when Tap and Untap are called successfully.
            </summary>
        </member>
        <member name="T:Spite.ITappableMethodProvider">
            <summary>
            Provides various methods to objects that implement ITappable.
            </summary>
        </member>
        <member name="M:Spite.ITappableMethodProvider.Tap(Spite.ITappable)">
            <summary>
            Taps the tappable object.
            </summary>
            <param name="tappable">The tappable being tapped.</param>
            <returns>True of the tappable is tapped.</returns>
        </member>
        <member name="M:Spite.ITappableMethodProvider.Untap(Spite.ITappable)">
            <summary>
            Untaps the tappable.
            </summary>
            <param name="tappable">The tappable being untapped.</param>
            <returns>True if the tappable is untapped. Otherwise, false.</returns>
        </member>
        <member name="T:Spite.TapStateChange">
            <summary>
            A delegate to call when an entity is tapped or untapped.
            </summary>
            <param name="sender">The entity whose state was changed.</param>
            <param name="args">Contextual information about the state change.</param>
        </member>
        <member name="T:Spite.ITeam">
            <summary>
            Represents a team of entities in a battle.
            </summary>
        </member>
        <member name="P:Spite.ITeam.AreAllAlive">
            <summary>
            Are all entities managed by this Team still alive?
            </summary>
        </member>
        <member name="P:Spite.ITeam.AliveEntityCount">
            <summary>
            The number of living entities on this team.
            </summary>
        </member>
        <member name="P:Spite.ITeam.ManagedEntityCount">
            <summary>
            The number of entities managed by this Team.
            </summary>
        </member>
        <member name="M:Spite.ITeam.AddEntity(Spite.IEntity)">
            <summary>
            Adds the entity onto the team.
            </summary>
            <param name="entity">The entity pertaining to the team.</param>
        </member>
        <member name="M:Spite.ITeam.InitializeEntityCount(System.UInt32)">
            <summary>
            Sets the number of entities slots on this team.
            </summary>
            <param name="entityCount">The number of entity slots to initialize.</param>
        </member>
        <member name="P:Spite.ITeam.CurrentStanding">
            <summary>
            The current standing of the team.
            </summary>
        </member>
        <member name="M:Spite.ITeam.DetermineStanding(Spite.Arena)">
            <summary>
            Determines and sets the current standing othe team in the arena.
            </summary>
            <param name="context">The arena this team is fighting in.</param>
            <returns>True if this team has achieved victory.</returns>
        </member>
        <member name="T:Spite.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Spite.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Spite.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Spite.Properties.Resources.ArenaNotStarted">
            <summary>
              Looks up a localized string similar to The arena hasn&apos;t been made yet - try calling SetNumberOfSides first..
            </summary>
        </member>
        <member name="P:Spite.Properties.Resources.InvalidTurnScheme">
            <summary>
              Looks up a localized string similar to The current turn scheme is invalid..
            </summary>
        </member>
        <member name="P:Spite.Properties.Resources.NoTeamAddedArenaBuilder">
            <summary>
              Looks up a localized string similar to A team hasn&apos;t been added to this arena yet..
            </summary>
        </member>
        <member name="T:Spite.TeamBuilder">
            <summary>
            Provides methods useful in building a team.
            </summary>
        </member>
        <member name="M:Spite.TeamBuilder.Start``1">
            <summary>
            Starts building the team with a fresh instance of the specified team type.
            </summary>
            <typeparam name="TTeam">The type of team to create.</typeparam>
            <returns>The team builder for chaining.</returns>
        </member>
        <member name="M:Spite.TeamBuilder.SetTeamSize(System.UInt32)">
            <summary>
            Sets the number of entity slots on this team.
            </summary>
            <param name="teamSize">The initial or max size of the team.</param>
            <returns>The team builder for chaining.</returns>
        </member>
        <member name="M:Spite.TeamBuilder.AddEntity(Spite.IEntity)">
            <summary>
            Adds the entity to the team.
            </summary>
            <param name="entity">The entity to add to the team.</param>
            <returns>The TeamBuilder for chaining.</returns>
        </member>
        <member name="M:Spite.TeamBuilder.SetTeamStandingDeterminer(System.Func{Spite.Arena,Spite.TeamStanding})">
            <summary>
            Sets the win condition for this team.
            </summary>
            <param name="winConFunc">The function that will be used to determine the win conditions.</param>
            <returns>The TeamBuilder for chaining.</returns>
        </member>
        <member name="M:Spite.TeamBuilder.Finish">
            <summary>
            Finishes building the team.
            </summary>
            <returns>The built team.</returns>
        </member>
        <member name="M:Spite.TeamBuilder.Finish``1">
            <summary>
            Finsihes building the team and casts it to the specific type.
            </summary>
            <typeparam name="TTeam">The team type to cast to. Should be the same type as used in TTeam.</typeparam>
            <returns>The team of the specified type.</returns>
        </member>
        <member name="T:Spite.TeamStanding">
            <summary>
            Enumerates the possible standings of a team in a battle.
            </summary>
        </member>
        <member name="F:Spite.TeamStanding.Eliminated">
            <summary>
            The team has been eliminated from the battle.
            </summary>
        </member>
        <member name="F:Spite.TeamStanding.Defeated">
            <summary>
            The team has been defeated and is still in battle.
            </summary>
        </member>
        <member name="F:Spite.TeamStanding.Inactive">
            <summary>
            The team is not an active participant in the battle.
            </summary>
        </member>
        <member name="F:Spite.TeamStanding.Competing">
            <summary>
            The team hasn't been defeated, eliminated, or gained victory.
            </summary>
        </member>
        <member name="F:Spite.TeamStanding.Victorious">
            <summary>
            The team is considered victorious in the battle.
            </summary>
        </member>
        <member name="T:Spite.TurnScheme">
            <summary>
            Helps an Arena evaluate the order that turns are taken in.
            </summary>
        </member>
        <member name="F:Spite.TurnScheme.Team">
            <summary>
            Turns are assigned to teams.
            </summary>
        </member>
        <member name="F:Spite.TurnScheme.Entity">
            <summary>
            Turns are assigned to entities one-by-one.
            </summary>
        </member>
        <member name="F:Spite.TurnScheme.VonNeumannTeam">
            <summary>
            Sides decide what each entity on their team will do at the same time.
            </summary>
        </member>
        <member name="F:Spite.TurnScheme.VonNeumannEntity">
            <summary>
            Sides decide what one entity will do at the same time.
            </summary>
        </member>
    </members>
</doc>
